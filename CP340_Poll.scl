FUNCTION_BLOCK "CP340_Poll"
TITLE='485轮询'
VERSION:'0.6'
KNOW_HOW_PROTECT
AUTHOR:Goosy
NAME:SC
FAMILY:GoosyLib

VAR_INPUT
  customTrigger : BOOL;       // 默认为false,即顺序轮询。当本参数为true时，由参数REQ定义轮询方式。
  REQ : BOOL;                 // 当customTrigger置位时起作用，在REQ的上升沿发出当次轮询。比如可以把一个秒脉冲赋值给REQ
  Laddr : INT;                // 模块地址
  waitTime : DINT := 2000;    // 单次询问的最大等待时间，超时则询问失败并转下一个询问
  wait_time AT waitTime : TIME;
  tryTimes : INT := 5;        // 一个设备的最多询问失败次数，超过该次数标记该设备数据无效
  DATA : ANY;                 // 轮询定义系列数据区
  Pointer_S AT DATA : STRUCT  // Define ANY structure
    SyntaxID: BYTE;
    DataType: BYTE;
    DataCount: INT;
    DB_Nummer: WORD;
    Byte_Pointer: DWORD;
  END_STRUCT;
END_VAR

VAR
  trigger : BOOL;      // 内部控制CP341发送，相当于每轮正在发送期间
  transmitting : BOOL; // 当前轮询进行中
  initialized : BOOL;  // 输入已初始化
  send_start : BOOL;   // 发送上升沿
  baseOffset : INT;    // 轮询区的起始偏移量
  endOffset : INT;     // 轮询区的结束偏移量
  transLength : INT;   // 询问总轮数
  transIndex : INT;    // 第几轮
  Poll_DB : INT;       // 轮询DB号
  CP_SEND : P_SEND;
  CP_RCV : P_RCV;
  TimeOver : TON;
END_VAR

VAR_TEMP
  is_modbus : BOOL;
  on_receive : BOOL;
  send_byte : BYTE;
  recv_byte : BYTE;
  w_Poll_DB : WORD;
  w_Send_DB : WORD;
  sendDB : INT;
  sendDBB : INT;
  sendLength : INT;
  w_Recv_DB : WORD;
  recvDB : INT;
  recvDBB : INT;
  recvLength : INT;
  CRC : WORD;
  // recv_CRC : WORD;
  wait_count : INT;
  currOffset : INT; // 当前轮询的偏移
END_VAR


BEGIN

  // 初始化轮询列表
  IF NOT initialized THEN
    IF (Pointer_S.DB_Nummer = 0)
      OR (Pointer_S.DataType <> B#16#2)
      OR ((Pointer_S.Byte_Pointer AND DW#16#ff000000) <> DW#16#84000000) THEN
      RETURN;
    END_IF;
    w_Poll_DB := Pointer_S.DB_Nummer;
    Poll_DB := WORD_TO_INT(w_Poll_DB);
    baseOffset := DWORD_TO_INT(SHR(IN := Pointer_S.Byte_Pointer, N := 3));
    transIndex := 0;
    currOffset := baseOffset;
    endOffset := baseOffset + Pointer_S.DataCount;
    REPEAT
      // current
      WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14] := 0; //waitCount
      // next
      currOffset := currOffset + 16;
      // 范围检查
      IF currOffset > endOffset - 16 THEN
        currOffset := baseOffset;
        transLength := transIndex + 1;
      ELSE
        transIndex := transIndex + 1;
      END_IF;
    UNTIL currOffset = baseOffset
    END_REPEAT;
    transIndex := 0;
    initialized := TRUE;
  END_IF;

  IF transIndex < 0 OR transIndex >= transLength THEN
    transIndex := 0;
  END_IF;

  // 准备数据
  w_Poll_DB := INT_TO_WORD(Poll_DB);
  currOffset := transIndex * 16 + baseOffset;
  is_modbus := WORD_TO_BLOCK_DB(w_Poll_DB).DX[currOffset,2];
  w_Send_DB := WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 4];
  sendDB := WORD_TO_INT(w_Send_DB);
  sendDBB := WORD_TO_INT(WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 6]);
  sendLength := WORD_TO_INT(WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 8]);
  w_Recv_DB := WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 10];
  recvDB := WORD_TO_INT(w_Recv_DB);
  recvDBB := WORD_TO_INT(WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 12]);

  // 发送数据
  IF is_modbus AND send_start THEN
    // modbus 在发送上升沿进行CRC校验
    "CRC16"(
       DB_NO     := sendDB,
       DBB_Start := sendDBB,
       DBB_Counts:= sendLength - 2,
       CRC       := WORD_TO_BLOCK_DB(w_Send_DB).DW[sendDBB + sendLength - 2]);
  END_IF;
  CP_SEND (
    REQ                      := trigger,
    LADDR                    := Laddr,
    DB_NO                    := sendDB,
    DBB_NO                   := sendDBB,
    LEN                      := sendLength);
  IF CP_SEND.DONE OR CP_SEND.ERROR THEN
    trigger := FALSE; //取消触发
  END_IF;
  WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,3] := trigger;    // 设置设备发送标志

  //接收功能
  CP_RCV (
    EN_R                     := TRUE,
    LADDR                    := Laddr,
    DB_NO                    := recvDB,
    DBB_NO                   := recvDBB + 1);

  // 接收成功时处理
  on_receive := CP_RCV.NDR;
  IF on_receive AND is_modbus THEN // 对 modbus 接收附加判断
    // check MFunction
    send_byte := WORD_TO_BLOCK_DB(w_Send_DB).DB[sendDBB + 1];
    recv_byte := WORD_TO_BLOCK_DB(w_Recv_DB).DB[recvDBB + 2];
    on_receive := send_byte = recv_byte;
    // check device_ID
    send_byte := WORD_TO_BLOCK_DB(w_Send_DB).DB[sendDBB];
    recv_byte := WORD_TO_BLOCK_DB(w_Recv_DB).DB[recvDBB + 1];
    on_receive := on_receive AND send_byte = recv_byte;
    IF send_byte = B#16#5 OR send_byte = B#16#6 THEN // 05 06 功能
      recvLength := 6;
    ELSE // 非 05 06 功能
      recvLength := BYTE_TO_INT(WORD_TO_BLOCK_DB(w_Recv_DB).DB[recvDBB + 3]) + 3;
    END_IF;
    "CRC16"(
      DB_NO     := recvDB,
      DBB_Start := recvDBB + 1,
      DBB_Counts:= recvLength,
      CRC       := CRC);
    // FIXME: something wrong on check receive CRC
    // IF on_receive THEN // check CRC
    //   recv_byte := WORD_TO_BLOCK_DB(w_Recv_DB).DB[recvDBB + recvLength + 1];
    //   recv_CRC := SHL(IN:=BYTE_TO_WORD(recv_byte), N:=8);
    //   recv_byte := WORD_TO_BLOCK_DB(w_Recv_DB).DB[recvDBB + recvLength + 2];
    //   recv_CRC := recv_CRC OR BYTE_TO_WORD(recv_byte);
    //   on_receive := CRC = recv_CRC;
    // END_IF;
  END_IF;
  WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,2] := on_receive; // 设置设备接收标志

  IF on_receive THEN
    WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14] := W#16#0; //wait_count
    WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,0] := TRUE; // 设备正常标志
    WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,1] := FALSE; // 设备错误标志
  ELSIF CP_RCV.NDR THEN
    WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,0] := FALSE; // 设备正常标志
    WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,1] := TRUE; // 设备错误标志;
  END_IF;

  // 超时处理
  wait_count := WORD_TO_INT(WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14]);
  IF wait_count > tryTimes THEN
    WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB, 0] := FALSE;// 设置设备正常标志
    WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB, 1] := TRUE;// 设置设备无效标志
  END_IF;
  IF wait_count > 10 * tryTimes THEN // 重新尝试
    WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14] := W#16#0;
  END_IF;
  TimeOver( // 启动超时
       IN := transmitting,
       PT := wait_time);

  // 处理 transmitting
  wait_count := WORD_TO_INT(WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14]);
  send_start := FALSE;
  IF customTrigger THEN
    IF NOT REQ THEN
      // -REQ
      trigger := FALSE;
      transmitting := FALSE;
    ELSIF NOT transmitting THEN
      // REQ & -transmitting
      // 在 REQ 上升沿启动新一轮计数增加
      WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14]:= INT_TO_WORD(wait_count + 1);
      WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,2] := FALSE; // 设置设备接收标志
      WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,3] := FALSE; // 设置设备发送标志
      transIndex := transIndex + 1;
      transmitting := TRUE;
      trigger := TRUE;
      send_start := TRUE;
    END_IF;
  ELSE
    IF CP_RCV.NDR OR TimeOver.Q THEN
      // 当前询问超时计数增加
      IF TimeOver.Q THEN
        WORD_TO_BLOCK_DB(w_Poll_DB).DW[currOffset + 14] := INT_TO_WORD(wait_count + 1);
      END_IF;
      // 结束当前询问
      transmitting := FALSE;
      trigger := FALSE;
    ELSIF NOT transmitting THEN
      // 启动新一轮，同时保证前一轮有一个循环时间处理状态
      WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,2] := FALSE; // 设置设备接收标志
      WORD_TO_BLOCK_DB(w_Recv_DB).DX[recvDBB,3] := FALSE; // 设置设备发送标志
      transIndex := transIndex + 1;
      transmitting := TRUE;
      trigger := TRUE;
      send_start := TRUE;
    END_IF;
  END_IF;

END_FUNCTION_BLOCK
