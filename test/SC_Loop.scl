// 本代码由 S7_SCL_SRC_GEN 依据配置 "test" 自动生成。 author: goosy.jo@gmail.com
DATA_BLOCK "DeviceData"
STRUCT
  device0_workOK : BOOL;                //设备正常指示
  device0_error : BOOL;                 //设备错误指示
  device0_on_receive : BOOL;            //设备接收指示
  device0_sending : BOOL;               //正在向设备发送标识
  device0_deviceID : BYTE;              //设备号
  device0_funcNo : BYTE;                //modbus功能号
  device0_len : BYTE;                   //长度
  device0_data : ARRAY[4..27] OF BYTE;  //数值
  device0_CRC : WORD;                   //CRC16
  device1_workOK : BOOL;                //设备正常指示
  device1_error : BOOL;                 //设备错误指示
  device1_on_receive : BOOL;            //设备接收指示
  device1_sending : BOOL;               //正在向设备发送标识
  device1_data : ARRAY[32..39] OF BYTE; //数值
END_STRUCT;
BEGIN
END_DATA_BLOCK

FUNCTION_BLOCK "write_cmd"
TITLE='撬块写命令'
VERSION:'1.0'
AUTHOR:Goosy
NAME:writecmd
FAMILY:GooLib

VAR_INPUT
  recv: STRUCT
    workOK : BOOL;     //设备正常指示
    error : BOOL;      //设备错误指示
    on_receive : BOOL; //设备接收指示
    sending : BOOL;    //正在向设备发送标识
    ID : BYTE;         //子站地址
    func : BYTE;       //modbus 功能号
    start : WORD;      //起始地址
    data : WORD;       //数据
    CRC : WORD;        //检验字
  END_STRUCT;
END_VAR

VAR_OUTPUT
  send: STRUCT
    ID : BYTE := B#16#10;   //子站地址
    func : BYTE := B#16#6;  //modbus 功能号
    start : INT := 1226;    //起始地址
    data : INT := 0;        //数据
    CRC : WORD;             //检验字
  END_STRUCT;
END_VAR

BEGIN
IF recv.on_receive THEN
  send.data := send.data + 1;
END_IF;
END_FUNCTION_BLOCK


// 轮询DB块，含485调度指令和发送数据
DATA_BLOCK "SC_polls_DB"
STRUCT
  List0 : STRUCT //CP01 256 轮询命令数据
    poll_0 : STRUCT
      next: BOOL; // false为结尾，否则有下一个
      enable: BOOL := TRUE; // 允许本poll通讯
      modbusFlag : BOOL; // 是否为modbus协议
      status: WORD;    // 预留
      sendDB : INT; // 发送DB，为0时为本块
      sendDBB : INT; // 发送DB起始地址
      sendLength : INT; // 发送长度
      recvDB : INT; // 接收DB
      recvDBB : INT; // 接收DB起始地址
      waitCount : INT; // 发送等待次数
    END_STRUCT;
    poll_1 : STRUCT
      next: BOOL; // false为结尾，否则有下一个
      enable: BOOL := TRUE; // 允许本poll通讯
      modbusFlag : BOOL; // 是否为modbus协议
      status: WORD;    // 预留
      sendDB : INT; // 发送DB，为0时为本块
      sendDBB : INT; // 发送DB起始地址
      sendLength : INT; // 发送长度
      recvDB : INT; // 接收DB
      recvDBB : INT; // 接收DB起始地址
      waitCount : INT; // 发送等待次数
    END_STRUCT;
    poll_2 : STRUCT
      next: BOOL; // false为结尾，否则有下一个
      enable: BOOL := TRUE; // 允许本poll通讯
      modbusFlag : BOOL; // 是否为modbus协议
      status: WORD;    // 预留
      sendDB : INT; // 发送DB，为0时为本块
      sendDBB : INT; // 发送DB起始地址
      sendLength : INT; // 发送长度
      recvDB : INT; // 接收DB
      recvDBB : INT; // 接收DB起始地址
      waitCount : INT; // 发送等待次数
    END_STRUCT;
  END_STRUCT;
  poll_0_data : STRUCT
    device_ID : BYTE;    //子站地址
    MFunction : BYTE;    //modbus 功能号
    address : WORD;    //起始地址
    data : WORD;    //数据，对 01 02 03 04 功能码来说为长度，对 05 06 功能码来说为写入值
    CRC : WORD;    //检验字
  END_STRUCT;
  poll_1_data : STRUCT
    send_data : ARRAY  [0 .. 6] OF BYTE;    //发送数据
  END_STRUCT;
END_STRUCT;
BEGIN
  // --- CP01 256 轮询数据
  
  // poll 0  第1个poll modbus协议
  List0.poll_0.next := TRUE;
  List0.poll_0.modbusFlag := TRUE;
  List0.poll_0.sendDB := 880;
  List0.poll_0.sendDBB := 48;
  List0.poll_0.sendLength := 8;
  List0.poll_0.recvDB := 1;
  List0.poll_0.recvDBB := 0;
  // send data
  poll_0_data.device_ID := B#16#01;
  poll_0_data.MFunction := B#16#03;
  poll_0_data.address := W#16#0000;
  poll_0_data.data := W#16#000C;
  
  // poll 1  第2个poll 自定义协议
  List0.poll_1.next := TRUE;
  List0.poll_1.modbusFlag := FALSE;
  List0.poll_1.sendDB := 880;
  List0.poll_1.sendDBB := 56;
  List0.poll_1.sendLength := 7;
  List0.poll_1.recvDB := 1;
  List0.poll_1.recvDBB := 30;
  // send data
  poll_1_data.send_data[0] := B#16#02;    //发送数据0
  poll_1_data.send_data[1] := B#16#03;    //发送数据1
  poll_1_data.send_data[2] := B#16#00;    //发送数据2
  poll_1_data.send_data[3] := B#16#00;    //发送数据3
  poll_1_data.send_data[4] := B#16#18;    //发送数据4
  poll_1_data.send_data[5] := B#16#8E;    //发送数据5
  poll_1_data.send_data[6] := B#16#5D;    //发送数据6
  
  // poll 2  第3个poll 指定发送块
  List0.poll_2.next := FALSE;
  List0.poll_2.modbusFlag := TRUE;
  List0.poll_2.sendDB := 2;
  List0.poll_2.sendDBB := 10;
  List0.poll_2.sendLength := 8;
  List0.poll_2.recvDB := 2;
  List0.poll_2.recvDBB := 0;
  
END_DATA_BLOCK

// 主调用
FUNCTION "SC_Loop" : VOID

// 1. CP341 CP01 256
"CP341_Poll"."CP01"(
  Laddr         := 256,  // CP模块地址
  DATA          := "SC_polls_DB".List0);

// 接收块
// "SC_polls_DB" SC polls data
// "DeviceData" 
"write_cmd"."cmd_ret"();

IF "DeviceData".device0_on_receive THEN // 当指定设备(这里为设备1)有新数据接收到时
  count := count +1; // 利用已接收信息进行数据转换移动等处理
END_IF;

END_FUNCTION
